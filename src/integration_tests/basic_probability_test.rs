#[cfg(test)]
mod tests {
    use crate::probability::{ProbabilityDistribution, ToTable};

    #[test]
    fn test_reuse_of_constrained_value_one() {
        let dice = ProbabilityDistribution::new_dice(6).add_self_value_constraint(1);
        let value = dice.clone() * 10 + dice;
        assert_eq!(
            value.to_table().to_string().replace("\r\n", "\n"),
            "\
            +-------+-------+---+\n\
            | value | count | 1 |\n\
            +=======+=======+===+\n\
            | 11    | 1     | 1 |\n\
            +-------+-------+---+\n\
            | 22    | 1     | 2 |\n\
            +-------+-------+---+\n\
            | 33    | 1     | 3 |\n\
            +-------+-------+---+\n\
            | 44    | 1     | 4 |\n\
            +-------+-------+---+\n\
            | 55    | 1     | 5 |\n\
            +-------+-------+---+\n\
            | 66    | 1     | 6 |\n\
            +-------+-------+---+\n"
        );
    }

    #[test]
    fn test_reuse_of_constrained_value_two() {
        // roll a 3 sided dice
        //      on a 1 do 0 damage
        //      on a 2 do 2d4 + 5 damage
        //      on a 3 do 4d4 + 10 damage
        let attack = ProbabilityDistribution::new_dice(3).add_self_value_constraint(1);
        let damage = ProbabilityDistribution::new_multiple_dice(2, 4) + 5;

        let attack_damage = attack.clone() / 2 * damage.clone() + attack / 3 * (damage * 2);

        assert_eq!(
            attack_damage.to_table().to_string().replace("\r\n", "\n"),
            "\
            +-------+-------+---+\n\
            | value | count | 1 |\n\
            +=======+=======+===+\n\
            | 0     | 256   | 1 |\n\
            +-------+-------+---+\n\
            | 7     | 16    | 2 |\n\
            +-------+-------+---+\n\
            | 8     | 32    | 2 |\n\
            +-------+-------+---+\n\
            | 9     | 48    | 2 |\n\
            +-------+-------+---+\n\
            | 10    | 64    | 2 |\n\
            +-------+-------+---+\n\
            | 11    | 48    | 2 |\n\
            +-------+-------+---+\n\
            | 12    | 32    | 2 |\n\
            +-------+-------+---+\n\
            | 13    | 16    | 2 |\n\
            +-------+-------+---+\n\
            | 21    | 1     | 3 |\n\
            +-------+-------+---+\n\
            | 22    | 2     | 3 |\n\
            +-------+-------+---+\n\
            | 23    | 5     | 3 |\n\
            +-------+-------+---+\n\
            | 24    | 8     | 3 |\n\
            +-------+-------+---+\n\
            | 25    | 12    | 3 |\n\
            +-------+-------+---+\n\
            | 26    | 16    | 3 |\n\
            +-------+-------+---+\n\
            | 27    | 20    | 3 |\n\
            +-------+-------+---+\n\
            | 28    | 24    | 3 |\n\
            +-------+-------+---+\n\
            | 29    | 26    | 3 |\n\
            +-------+-------+---+\n\
            | 30    | 28    | 3 |\n\
            +-------+-------+---+\n\
            | 31    | 26    | 3 |\n\
            +-------+-------+---+\n\
            | 32    | 24    | 3 |\n\
            +-------+-------+---+\n\
            | 33    | 20    | 3 |\n\
            +-------+-------+---+\n\
            | 34    | 16    | 3 |\n\
            +-------+-------+---+\n\
            | 35    | 12    | 3 |\n\
            +-------+-------+---+\n\
            | 36    | 8     | 3 |\n\
            +-------+-------+---+\n\
            | 37    | 5     | 3 |\n\
            +-------+-------+---+\n\
            | 38    | 2     | 3 |\n\
            +-------+-------+---+\n\
            | 39    | 1     | 3 |\n\
            +-------+-------+---+\n"
        );
    }
}
